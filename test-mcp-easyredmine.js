const { spawn } = require('child_process');
const path = require('path');

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

console.log('üîí SSL verification disabled');
console.log('üöÄ Testing EasyRedmine MCP Server...');

// –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
const mcpServerPath = path.join(__dirname, 'infrastructure/mcp-server/easyredmine-mcp-server/dist/easyredmine-index.js');

// –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const mcpServer = spawn('node', [mcpServerPath], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    NODE_TLS_REJECT_UNAUTHORIZED: '0'
  }
});

// MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const listToolsRequest = {
  jsonrpc: "2.0",
  id: 1,
  method: "tools/list",
  params: {}
};

// MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
const getProjectsRequest = {
  jsonrpc: "2.0",
  id: 2,
  method: "tools/call",
  params: {
    name: "get_projects",
    arguments: {
      limit: 20,
      offset: 0
    }
  }
};

let toolsReceived = false;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
mcpServer.stdout.on('data', (data) => {
  try {
    const response = JSON.parse(data.toString());
    
    if (response.result && response.result.tools && !toolsReceived) {
      console.log('‚úÖ MCP Server Tools Available:');
      console.log('=' .repeat(50));
      
      response.result.tools.forEach((tool, index) => {
        console.log(`${index + 1}. ${tool.name}`);
        console.log(`   ${tool.description}`);
        console.log('');
      });
      
      toolsReceived = true;
      
      // –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
      console.log('üîÑ Requesting projects from EasyRedmine...');
      mcpServer.stdin.write(JSON.stringify(getProjectsRequest) + '\n');
    }
    
    if (response.result && response.result.content) {
      console.log('üöÄ EasyRedmine Projects via MCP:');
      console.log('=' .repeat(50));
      
      const projectsData = JSON.parse(response.result.content[0].text);
      
      if (projectsData.projects && projectsData.projects.length > 0) {
        console.log(`üìä Total projects: ${projectsData.total_count}`);
        console.log(`üìã Retrieved: ${projectsData.projects.length}`);
        console.log('');
        
        projectsData.projects.forEach((project, index) => {
          console.log(`${index + 1}. ${project.name}`);
          console.log(`   ID: ${project.id}`);
          console.log(`   Status: ${project.status === 1 ? 'üü¢ Active' : 'üî¥ Inactive'}`);
          console.log(`   Created: ${new Date(project.created_on).toLocaleDateString('ru-RU')}`);
          
          if (project.description) {
            const cleanDesc = project.description.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '').trim();
            if (cleanDesc) {
              console.log(`   Description: ${cleanDesc.substring(0, 60)}${cleanDesc.length > 60 ? '...' : ''}`);
            }
          }
          console.log('');
        });
      } else {
        console.log('‚ùå No projects found or error occurred');
        console.log('Response:', JSON.stringify(projectsData, null, 2));
      }
      
      mcpServer.kill();
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
mcpServer.stderr.on('data', (data) => {
  const message = data.toString().trim();
  if (message && !message.includes('EasyRedmine MCP server started')) {
    console.log('‚ö†Ô∏è  MCP Server:', message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
mcpServer.on('close', (code) => {
  if (code !== 0) {
    console.log(`üîö MCP Server exited with code ${code}`);
  }
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
console.log('üìã Requesting MCP tools list...');
mcpServer.stdin.write(JSON.stringify(listToolsRequest) + '\n');

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
setTimeout(() => {
  console.log('‚è∞ Timeout, finishing...');
  mcpServer.kill();
}, 15000);
