const { spawn } = require('child_process');
const path = require('path');

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

console.log('üîí SSL verification disabled for this process');

// –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
const mcpServerPath = path.join(__dirname, 'infrastructure/mcp-server/easyredmine-mcp-server/dist/easyredmine-index.js');

// –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const mcpServer = spawn('node', [mcpServerPath], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    NODE_TLS_REJECT_UNAUTHORIZED: '0'
  }
});

// MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
const getAllProjectsRequest = {
  jsonrpc: "2.0",
  id: 1,
  method: "tools/call",
  params: {
    name: "get_projects",
    arguments: {
      limit: 100,
      offset: 0
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
function buildProjectTree(projects) {
  const projectMap = new Map();
  const rootProjects = [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  projects.forEach(project => {
    projectMap.set(project.id, {
      ...project,
      children: []
    });
  });
  
  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
  projects.forEach(project => {
    if (project.parent && project.parent.id) {
      const parent = projectMap.get(project.parent.id);
      if (parent) {
        parent.children.push(projectMap.get(project.id));
      }
    } else {
      rootProjects.push(projectMap.get(project.id));
    }
  });
  
  return rootProjects;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
function displayProjectTree(projects, level = 0, prefix = '') {
  projects.forEach((project, index) => {
    const isLast = index === projects.length - 1;
    const currentPrefix = prefix + (isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ');
    const childPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
    
    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const statusText = project.status === 1 ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    
    // –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
    const projectType = project.custom_fields?.find(field => field.name === 'Project Type')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const practice = project.custom_fields?.find(field => field.name === 'Practice')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    console.log(`${currentPrefix}${project.name} (ID: ${project.id})`);
    console.log(`${childPrefix}   –°—Ç–∞—Ç—É—Å: ${statusText}`);
    console.log(`${childPrefix}   –¢–∏–ø: ${projectType}`);
    console.log(`${childPrefix}   –ü—Ä–∞–∫—Ç–∏–∫–∞: ${practice}`);
    console.log(`${childPrefix}   –°–æ–∑–¥–∞–Ω: ${new Date(project.created_on).toLocaleDateString('ru-RU')}`);
    
    if (project.description) {
      const cleanDesc = project.description.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '').trim();
      if (cleanDesc) {
        console.log(`${childPrefix}   –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanDesc.substring(0, 80)}${cleanDesc.length > 80 ? '...' : ''}`);
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
    if (project.children && project.children.length > 0) {
      console.log(`${childPrefix}   üìÅ –ü–æ–¥–ø—Ä–æ–µ–∫—Ç—ã (${project.children.length}):`);
      displayProjectTree(project.children, level + 1, childPrefix);
    }
    
    console.log('');
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
mcpServer.stdout.on('data', (data) => {
  try {
    const response = JSON.parse(data.toString());
    
    if (response.result && response.result.content) {
      console.log('üå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ EasyRedmine:');
      console.log('=' .repeat(60));
      
      const projectsData = JSON.parse(response.result.content[0].text);
      
      if (projectsData.projects && projectsData.projects.length > 0) {
        console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${projectsData.total_count}`);
        console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsData.projects.length}`);
        console.log('');
        
        // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectTree = buildProjectTree(projectsData.projects);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ
        displayProjectTree(projectTree);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤:');
        console.log('-'.repeat(40));
        
        const projectTypes = {};
        const practices = {};
        
        projectsData.projects.forEach(project => {
          const projectType = project.custom_fields?.find(field => field.name === 'Project Type')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
          const practice = project.custom_fields?.find(field => field.name === 'Practice')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
          
          projectTypes[projectType] = (projectTypes[projectType] || 0) + 1;
          practices[practice] = (practices[practice] || 0) + 1;
        });
        
        console.log('–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:');
        Object.entries(projectTypes).forEach(([type, count]) => {
          console.log(`  ${type}: ${count}`);
        });
        
        console.log('\n–ü—Ä–∞–∫—Ç–∏–∫–∏:');
        Object.entries(practices).forEach(([practice, count]) => {
          console.log(`  ${practice}: ${count}`);
        });
        
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(projectsData, null, 2));
      }
      
      mcpServer.kill();
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
mcpServer.stderr.on('data', (data) => {
  const message = data.toString().trim();
  if (message && !message.includes('EasyRedmine MCP server started')) {
    console.log('‚ö†Ô∏è  MCP Server:', message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
mcpServer.on('close', (code) => {
  if (code !== 0) {
    console.log(`üîö MCP Server exited with code ${code}`);
  }
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ EasyRedmine...');
console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');
mcpServer.stdin.write(JSON.stringify(getAllProjectsRequest) + '\n');

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
setTimeout(() => {
  console.log('‚è∞ –¢–∞–π–º–∞—É—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
  mcpServer.kill();
}, 20000);
