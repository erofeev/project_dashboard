const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
const projectsData = JSON.parse(fs.readFileSync('projects_data.json', 'utf8'));

console.log('üå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ EasyRedmine:');
console.log('=' .repeat(60));

if (projectsData.projects && projectsData.projects.length > 0) {
  console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${projectsData.total_count}`);
  console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsData.projects.length}`);
  console.log('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
  function buildProjectTree(projects) {
    const projectMap = new Map();
    const rootProjects = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects.forEach(project => {
      projectMap.set(project.id, {
        ...project,
        children: []
      });
    });
    
    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    projects.forEach(project => {
      if (project.parent && project.parent.id) {
        const parent = projectMap.get(project.parent.id);
        if (parent) {
          parent.children.push(projectMap.get(project.id));
        }
      } else {
        rootProjects.push(projectMap.get(project.id));
      }
    });
    
    return rootProjects;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
  function displayProjectTree(projects, level = 0, prefix = '') {
    projects.forEach((project, index) => {
      const isLast = index === projects.length - 1;
      const currentPrefix = prefix + (isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ');
      const childPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
      
      // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
      const statusText = project.status === 1 ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      
      // –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
      const projectType = project.custom_fields?.find(field => field.name === 'Project Type')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
      const practice = project.custom_fields?.find(field => field.name === 'Practice')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      
      console.log(`${currentPrefix}${project.name} (ID: ${project.id})`);
      console.log(`${childPrefix}   –°—Ç–∞—Ç—É—Å: ${statusText}`);
      console.log(`${childPrefix}   –¢–∏–ø: ${projectType}`);
      console.log(`${childPrefix}   –ü—Ä–∞–∫—Ç–∏–∫–∞: ${practice}`);
      console.log(`${childPrefix}   –°–æ–∑–¥–∞–Ω: ${new Date(project.created_on).toLocaleDateString('ru-RU')}`);
      
      if (project.description) {
        const cleanDesc = project.description.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '').trim();
        if (cleanDesc) {
          console.log(`${childPrefix}   –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanDesc.substring(0, 80)}${cleanDesc.length > 80 ? '...' : ''}`);
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
      if (project.children && project.children.length > 0) {
        console.log(`${childPrefix}   üìÅ –ü–æ–¥–ø—Ä–æ–µ–∫—Ç—ã (${project.children.length}):`);
        displayProjectTree(project.children, level + 1, childPrefix);
      }
      
      console.log('');
    });
  }

  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const projectTree = buildProjectTree(projectsData.projects);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ
  displayProjectTree(projectTree);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
  console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤:');
  console.log('-'.repeat(40));
  
  const projectTypes = {};
  const practices = {};
  const departments = {};
  const regions = {};
  
  projectsData.projects.forEach(project => {
    const projectType = project.custom_fields?.find(field => field.name === 'Project Type')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const practice = project.custom_fields?.find(field => field.name === 'Practice')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const department = project.custom_fields?.find(field => field.name === 'Department')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const region = project.custom_fields?.find(field => field.name === 'Region')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    projectTypes[projectType] = (projectTypes[projectType] || 0) + 1;
    practices[practice] = (practices[practice] || 0) + 1;
    departments[department] = (departments[department] || 0) + 1;
    regions[region] = (regions[region] || 0) + 1;
  });
  
  console.log('–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:');
  Object.entries(projectTypes).sort((a, b) => b[1] - a[1]).forEach(([type, count]) => {
    console.log(`  ${type}: ${count}`);
  });
  
  console.log('\n–ü—Ä–∞–∫—Ç–∏–∫–∏:');
  Object.entries(practices).sort((a, b) => b[1] - a[1]).forEach(([practice, count]) => {
    console.log(`  ${practice}: ${count}`);
  });
  
  console.log('\n–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:');
  Object.entries(departments).sort((a, b) => b[1] - a[1]).forEach(([dept, count]) => {
    console.log(`  ${dept}: ${count}`);
  });
  
  console.log('\n–†–µ–≥–∏–æ–Ω—ã:');
  Object.entries(regions).sort((a, b) => b[1] - a[1]).forEach(([region, count]) => {
    console.log(`  ${region}: ${count}`);
  });
  
  // –ê–Ω–∞–ª–∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏
  console.log('\nüå≥ –ê–Ω–∞–ª–∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
  console.log('-'.repeat(40));
  
  const projectsWithChildren = projectTree.filter(p => p.children.length > 0);
  const projectsWithoutChildren = projectTree.filter(p => p.children.length === 0);
  
  console.log(`–ö–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectTree.length}`);
  console.log(`–ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞–º–∏: ${projectsWithChildren.length}`);
  console.log(`–ü—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsWithoutChildren.length}`);
  
  if (projectsWithChildren.length > 0) {
    console.log('\n–ü—Ä–æ–µ–∫—Ç—ã —Å –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞–º–∏:');
    projectsWithChildren.forEach(project => {
      console.log(`  ${project.name} (ID: ${project.id}) - ${project.children.length} –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤`);
    });
  }
  
} else {
  console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(projectsData, null, 2));
}
