import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from '@modelcontextprotocol/sdk/types.js';
import PouchDB from 'pouchdb';
import httpAdapter from 'pouchdb-adapter-http';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º HTTP –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CouchDB
PouchDB.plugin(httpAdapter);

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö CouchDB
const usersDb = new PouchDB('http://admin:admin123@localhost:5984/users', { 
  adapter: 'http',
  skip_setup: false
});

const projectsDb = new PouchDB('http://admin:admin123@localhost:5984/projects', { 
  adapter: 'http',
  skip_setup: false
});

const timeEntriesDb = new PouchDB('http://admin:admin123@localhost:5984/time_entries', { 
  adapter: 'http',
  skip_setup: false
});

const invoicesDb = new PouchDB('http://admin:admin123@localhost:5984/invoices', { 
  adapter: 'http',
  skip_setup: false
});

const paymentsDb = new PouchDB('http://admin:admin123@localhost:5984/payments', { 
  adapter: 'http',
  skip_setup: false
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const tools: Tool[] = [
  {
    name: 'get_user_count',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'get_project_count',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'get_time_entries_count',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'get_invoice_count',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'get_payment_count',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'get_database_stats',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'create_user',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
    inputSchema: {
      type: 'object',
      properties: {
        email: { type: 'string', description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        name: { type: 'string', description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        role: { type: 'string', description: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        direction: { type: 'string', description: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }
      },
      required: ['email', 'name', 'role', 'direction']
    }
  },
  {
    name: 'get_user_by_email',
    description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
    inputSchema: {
      type: 'object',
      properties: {
        email: { type: 'string', description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
      },
      required: ['email']
    }
  }
];

// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const server = new Server(
  {
    name: 'pouchdb-mcp-server',
    version: '1.0.0',
  }
);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º capabilities –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return { tools };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case 'get_user_count': {
        const result = await usersDb.allDocs({ include_docs: false });
        return {
          content: [
            {
              type: 'text',
              text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${result.total_rows}`,
            },
          ],
        };
      }

      case 'get_project_count': {
        const result = await projectsDb.allDocs({ include_docs: false });
        return {
          content: [
            {
              type: 'text',
              text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${result.total_rows}`,
            },
          ],
        };
      }

      case 'get_time_entries_count': {
        const result = await timeEntriesDb.allDocs({ include_docs: false });
        return {
          content: [
            {
              type: 'text',
              text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${result.total_rows}`,
            },
          ],
        };
      }

      case 'get_invoice_count': {
        const result = await invoicesDb.allDocs({ include_docs: false });
        return {
          content: [
            {
              type: 'text',
              text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${result.total_rows}`,
            },
          ],
        };
      }

      case 'get_payment_count': {
        const result = await paymentsDb.allDocs({ include_docs: false });
        return {
          content: [
            {
              type: 'text',
              text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${result.total_rows}`,
            },
          ],
        };
      }

      case 'get_database_stats': {
        const usersCount = await usersDb.allDocs({ include_docs: false });
        const projectsCount = await projectsDb.allDocs({ include_docs: false });
        const timeEntriesCount = await timeEntriesDb.allDocs({ include_docs: false });
        const invoicesCount = await invoicesDb.allDocs({ include_docs: false });
        const paymentsCount = await paymentsDb.allDocs({ include_docs: false });

        const stats = {
          users: usersCount.total_rows,
          projects: projectsCount.total_rows,
          timeEntries: timeEntriesCount.total_rows,
          invoices: invoicesCount.total_rows,
          payments: paymentsCount.total_rows,
          total: usersCount.total_rows + projectsCount.total_rows + timeEntriesCount.total_rows + invoicesCount.total_rows + paymentsCount.total_rows
        };

        return {
          content: [
            {
              type: 'text',
              text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:\n` +
                    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.users}\n` +
                    `üìã –ü—Ä–æ–µ–∫—Ç—ã: ${stats.projects}\n` +
                    `‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${stats.timeEntries}\n` +
                    `üßæ –°—á–µ—Ç–∞: ${stats.invoices}\n` +
                    `üí∞ –ü–ª–∞—Ç–µ–∂–∏: ${stats.payments}\n` +
                    `üìà –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.total}`,
            },
          ],
        };
      }

      case 'create_user': {
        const { email, name, role, direction } = args as { email: string; name: string; role: string; direction: string };
        
        const newUser = {
          _id: email,
          email,
          name,
          role,
          direction,
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        };

        const result = await usersDb.put(newUser);
        return {
          content: [
            {
              type: 'text',
              text: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:\n` +
                    `Email: ${email}\n` +
                    `–ò–º—è: ${name}\n` +
                    `–†–æ–ª—å: ${role}\n` +
                    `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}\n` +
                    `ID: ${result.id}`,
            },
          ],
        };
      }

      case 'get_user_by_email': {
        const { email } = args as { email: string };
        try {
          const user = await usersDb.get(email) as any;
          return {
            content: [
              {
                type: 'text',
                text: `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:\n` +
                      `Email: ${user.email}\n` +
                      `–ò–º—è: ${user.name}\n` +
                      `–†–æ–ª—å: ${user.role}\n` +
                      `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${user.direction}\n` +
                      `–ê–∫—Ç–∏–≤–µ–Ω: ${user.isActive ? '–î–∞' : '–ù–µ—Ç'}\n` +
                      `–°–æ–∑–¥–∞–Ω: ${user.createdAt}`,
              },
            ],
          };
        } catch (error) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
              },
            ],
            isError: true,
          };
        }
      }

      case 'get_all_users': {
        const { limit = 100 } = args as { limit?: number };
        const result = await usersDb.allDocs({ include_docs: true, limit });
        const users = result.rows
          .filter(row => row.doc && !row.id.startsWith('_design/'))
          .map(row => row.doc);
        
        return {
          content: [
            {
              type: 'text',
              text: `üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${users.length}):\n\n${JSON.stringify(users, null, 2)}`,
            },
          ],
        };
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
    }
  } catch (error) {
    return {
      content: [
        {
          type: 'text',
          text: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        },
      ],
      isError: true,
    };
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const transport = new StdioServerTransport();
await server.connect(transport);

console.error('PouchDB MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ CouchDB');
