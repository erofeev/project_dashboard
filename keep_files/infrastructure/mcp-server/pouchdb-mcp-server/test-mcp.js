// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
import { spawn } from 'child_process';

const serverPath = './dist/index.js';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
function testMCPServer() {
  return new Promise((resolve, reject) => {
    const server = spawn('node', [serverPath], {
      stdio: ['pipe', 'pipe', 'pipe'],
      cwd: process.cwd()
    });

    let output = '';
    let errorOutput = '';

    server.stdout.on('data', (data) => {
      output += data.toString();
    });

    server.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    server.on('close', (code) => {
      if (code === 0) {
        resolve(output);
      } else {
        reject(new Error(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${errorOutput}`));
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MCP –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const request = {
      jsonrpc: '2.0',
      id: 1,
      method: 'tools/list',
      params: {}
    };

    server.stdin.write(JSON.stringify(request) + '\n');
    server.stdin.end();
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...');

testMCPServer()
  .then(output => {
    console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('–û—Ç–≤–µ—Ç:', output);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
  });
