// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PouchDB MCP Server
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä

import { spawn } from 'child_process';
import { readFileSync } from 'fs';

// –ü—É—Ç—å –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É
const serverPath = './dist/index.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–∞
async function sendMCPRequest(method, params = {}) {
  return new Promise((resolve, reject) => {
    const server = spawn('node', [serverPath], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    let output = '';
    let errorOutput = '';

    server.stdout.on('data', (data) => {
      output += data.toString();
    });

    server.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    server.on('close', (code) => {
      if (code === 0) {
        try {
          const response = JSON.parse(output);
          resolve(response);
        } catch (e) {
          reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: ${output}`));
        }
      } else {
        reject(new Error(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${errorOutput}`));
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MCP –∑–∞–ø—Ä–æ—Å
    const request = {
      jsonrpc: '2.0',
      id: 1,
      method: method,
      params: params
    };

    server.stdin.write(JSON.stringify(request) + '\n');
    server.stdin.end();
  });
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function examples() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PouchDB MCP Server...\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const createResult = await sendMCPRequest('tools/call', {
      name: 'create_document',
      arguments: {
        id: 'user1',
        data: {
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          email: 'ivan@example.com',
          age: 25,
          city: '–ú–æ—Å–∫–≤–∞'
        }
      }
    });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', createResult.result?.content?.[0]?.text);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const getResult = await sendMCPRequest('tools/call', {
      name: 'get_document',
      arguments: {
        id: 'user1'
      }
    });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω:', getResult.result?.content?.[0]?.text);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    await sendMCPRequest('tools/call', {
      name: 'create_document',
      arguments: {
        id: 'user2',
        data: {
          name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
          email: 'maria@example.com',
          age: 30,
          city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
        }
      }
    });

    // 4. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('\n4. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    const listResult = await sendMCPRequest('tools/call', {
      name: 'list_documents',
      arguments: {
        limit: 10
      }
    });
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', listResult.result?.content?.[0]?.text);

    // 5. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('\n5. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç...');
    const queryResult = await sendMCPRequest('tools/call', {
      name: 'query_documents',
      arguments: {
        selector: {
          age: { $gte: 25 }
        },
        limit: 10
      }
    });
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', queryResult.result?.content?.[0]?.text);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
examples();
