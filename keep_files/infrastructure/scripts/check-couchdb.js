const nano = require('nano');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CouchDB
const COUCHDB_URL = 'http://admin:admin123@localhost:5984';

async function checkCouchDB() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è CouchDB...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ CouchDB
    const couch = nano(COUCHDB_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const serverInfo = await couch.info();
    console.log('‚úÖ CouchDB –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log(`   –í–µ—Ä—Å–∏—è: ${serverInfo.version}`);
    console.log(`   UUID: ${serverInfo.uuid}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    const dbNames = await couch.db.list();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: ${dbNames.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for (const dbName of dbNames) {
      try {
        const dbInfo = await couch.use(dbName).info();
        console.log(`\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbName}`);
        console.log(`   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${dbInfo.doc_count}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${(dbInfo.sizes.file / 1024 / 1024).toFixed(2)} MB`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${dbInfo.purge_seq === 0 ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üü° –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è'}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±–∞–∑–∞ users, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (dbName === 'users') {
          const usersDb = couch.use(dbName);
          const users = await usersDb.list({ include_docs: true });
          console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.rows.length}`);
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
          const roleCounts = {};
          users.rows.forEach(row => {
            const role = row.doc.role || 'unknown';
            roleCounts[role] = (roleCounts[role] || 0) + 1;
          });
          
          console.log('   –ü–æ —Ä–æ–ª—è–º:');
          Object.entries(roleCounts).forEach(([role, count]) => {
            console.log(`     ${role}: ${count}`);
          });
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±–∞–∑–∞ projects, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (dbName === 'projects') {
          const projectsDb = couch.use(dbName);
          const projects = await projectsDb.list({ include_docs: true });
          console.log(`   –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projects.rows.length}`);
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
          const statusCounts = {};
          projects.rows.forEach(row => {
            const status = row.doc.status || 'unknown';
            statusCounts[status] = (statusCounts[status] || 0) + 1;
          });
          
          console.log('   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
          Object.entries(statusCounts).forEach(([status, count]) => {
            console.log(`     ${status}: ${count}`);
          });
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±–∞–∑–∞ time_entries, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (dbName === 'time_entries') {
          const timeEntriesDb = couch.use(dbName);
          const timeEntries = await timeEntriesDb.list({ include_docs: true });
          console.log(`   –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${timeEntries.rows.length}`);
          
          // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
          let totalHours = 0;
          timeEntries.rows.forEach(row => {
            totalHours += row.doc.hours || 0;
          });
          console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalHours.toFixed(2)} —á–∞—Å–æ–≤`);
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±–∞–∑–∞ invoices, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (dbName === 'invoices') {
          const invoicesDb = couch.use(dbName);
          const invoices = await invoicesDb.list({ include_docs: true });
          console.log(`   –°—á–µ—Ç–æ–≤: ${invoices.rows.length}`);
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
          const statusCounts = {};
          let totalAmount = 0;
          invoices.rows.forEach(row => {
            const status = row.doc.status || 'unknown';
            statusCounts[status] = (statusCounts[status] || 0) + 1;
            totalAmount += row.doc.amount || 0;
          });
          
          console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} RUB`);
          console.log('   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
          Object.entries(statusCounts).forEach(([status, count]) => {
            console.log(`     ${status}: ${count}`);
          });
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã ${dbName}:`, error.message);
      }
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ CouchDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CouchDB:', error.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: docker-compose up -d');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ CouchDB –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5984');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs couchdb');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkCouchDB();
