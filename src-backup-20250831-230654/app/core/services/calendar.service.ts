import { Injectable, signal } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, forkJoin, of } from 'rxjs';
import { map, catchError, tap, timeout } from 'rxjs/operators';

export interface RussianCalendarMonth {
  month: number;
  days: string; // "1,2,3,4,5,6,7,8,11,12,18,19,25,26"
}

export interface RussianCalendarData {
  year: number;
  months: RussianCalendarMonth[];
  statistic: {
    workdays: number;
    holidays: number;
    hours40: number;
    hours36?: number;
    hours24?: number;
  };
}

export interface WorkingCalendar {
  [yearMonth: string]: number; // "2025-01": 168 (—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã)
}

export interface CalendarCache {
  [year: string]: RussianCalendarData;
}

@Injectable({
  providedIn: 'root'
})
export class CalendarService {

  // === REACTIVE STATE ===
  public workingCalendar = signal<WorkingCalendar>({});
  public loadingStatus = signal<string>('');
  public isLoading = signal<boolean>(false);

  // === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ===
  private calendarCache: CalendarCache = {};
  private readonly CACHE_KEY = 'russian-calendar-cache';
  private readonly CACHE_EXPIRY_DAYS = 30; // –ö—ç—à –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π

  // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
  private readonly API_BASE_URL = '/api/calendar'; // Proxy URL –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
  private readonly FALLBACK_URL = 'https://xmlcalendar.ru/data/ru'; // Fallback –¥–ª—è Service Worker
  private readonly STATIC_CALENDAR_URL = '/assets/data/russian-calendars.json'; // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  private readonly START_YEAR = 2020; // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
  private readonly CURRENT_YEAR = new Date().getFullYear();
  private readonly WORKING_HOURS_PER_DAY = 8;

  constructor(private http: HttpClient) {
    this.loadCachedData();
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∑–∞ –≤—Å–µ –≥–æ–¥—ã (2020-—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
   */
  async loadAllCalendars(): Promise<WorkingCalendar> {
    this.isLoading.set(true);
    this.loadingStatus.set('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...');

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const years = this.generateYearsRange();
      this.loadingStatus.set(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∑–∞ ${years.length} –ª–µ—Ç (${this.START_YEAR}-${this.CURRENT_YEAR})...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –≥–æ–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å (–Ω–µ –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏)
      const yearsToLoad = years.filter(year => !this.isCacheValid(year));
      
      if (yearsToLoad.length === 0) {
        this.loadingStatus.set('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        const calendar = this.buildWorkingCalendarFromCache();
        this.workingCalendar.set(calendar);
        this.isLoading.set(false);
        return calendar;
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      this.loadingStatus.set(`–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...`);
      const staticCalendars = await this.loadStaticCalendars();
      let successCount = 0;

      if (staticCalendars) {
        console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', {
          –¥–æ—Å—Ç—É–ø–Ω–æ: Object.keys(staticCalendars),
          —Ç—Ä–µ–±—É–µ—Ç—Å—è: yearsToLoad
        });
        
        yearsToLoad.forEach(year => {
          if (staticCalendars[year.toString()]) {
            this.calendarCache[year.toString()] = staticCalendars[year.toString()];
            successCount++;
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: ${year}`);
          } else {
            console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è ${year}`);
          }
        });
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–æ–¥–∞ —á–µ—Ä–µ–∑ API –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
      const remainingYears = yearsToLoad.filter(year => !this.calendarCache[year.toString()]);
      
      if (remainingYears.length > 0) {
        this.loadingStatus.set(`–ó–∞–≥—Ä—É–∑–∫–∞ ${remainingYears.length} –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∏–∑ API...`);
        const calendarRequests = remainingYears.map(year => this.loadYearCalendar(year));

        const results = await Promise.allSettled(calendarRequests);
        let errorCount = 0;

        results.forEach((result, index) => {
          if (result.status === 'fulfilled' && result.value) {
            const year = remainingYears[index];
            this.calendarCache[year.toString()] = result.value;
            successCount++;
          } else {
            errorCount++;
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è ${remainingYears[index]} –≥–æ–¥–∞:`, 
              result.status === 'rejected' ? result.reason : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
          }
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
      this.saveCacheToStorage();

      // –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      const workingCalendar = this.buildWorkingCalendarFromCache();
      this.workingCalendar.set(workingCalendar);

      const totalErrorCount = yearsToLoad.length - successCount;
      this.loadingStatus.set(
        `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount} –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π, –æ—à–∏–±–æ–∫: ${totalErrorCount}`
      );

      console.log(`üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, {
        —É—Å–ø–µ—à–Ω–æ: successCount,
        –æ—à–∏–±–æ–∫: totalErrorCount,
        –≤—Å–µ–≥–æ_–º–µ—Å—è—Ü–µ–≤: Object.keys(workingCalendar).length,
        –ø–µ—Ä–∏–æ–¥: `${this.START_YEAR}-${this.CURRENT_YEAR}`
      });

      this.isLoading.set(false);
      return workingCalendar;

    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:', error);
      this.loadingStatus.set('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π');
      this.isLoading.set(false);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      const fallbackCalendar = Object.keys(this.calendarCache).length > 0
        ? this.buildWorkingCalendarFromCache()
        : this.generateDefaultCalendar();
        
      this.workingCalendar.set(fallbackCalendar);
      return fallbackCalendar;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞ —Å fallback
   */
  private loadYearCalendar(year: number): Promise<RussianCalendarData | null> {
    return new Promise((resolve) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ proxy
      const proxyUrl = `${this.API_BASE_URL}/${year}/calendar.json`;
      
      this.tryLoadFromUrl(proxyUrl, year).then((data) => {
        if (data) {
          resolve(data);
        } else {
          // Fallback: –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π URL (–¥–ª—è Service Worker –≤ PWA)
          console.warn(`Proxy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è ${year}, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π URL...`);
          const directUrl = `${this.FALLBACK_URL}/${year}/calendar.json`;
          
          this.tryLoadFromUrl(directUrl, year).then((fallbackData) => {
            resolve(fallbackData);
          });
        }
      });
    });
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL
   */
  private tryLoadFromUrl(url: string, year: number): Promise<RussianCalendarData | null> {
    return new Promise((resolve) => {
      this.http.get<RussianCalendarData>(url).pipe(
        timeout(10000), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        catchError((error) => {
          console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ${year} —Å URL ${url}:`, error);
          return of(null);
        })
      ).subscribe({
        next: (data) => {
          if (data && data.year === year && data.months?.length === 12) {
            console.log(`‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ${year} –∑–∞–≥—Ä—É–∂–µ–Ω —Å ${url}`);
            resolve(data);
          } else {
            console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${year} –≥–æ–¥–∞ —Å URL ${url}`);
            resolve(null);
          }
        },
        error: () => resolve(null)
      });
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ assets
   */
  private loadStaticCalendars(): Promise<{ [year: string]: RussianCalendarData } | null> {
    return new Promise((resolve) => {
      this.http.get<{ [year: string]: RussianCalendarData }>(this.STATIC_CALENDAR_URL).pipe(
        timeout(5000),
        catchError((error) => {
          console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:', error);
          return of(null);
        })
      ).subscribe({
        next: (data) => {
          if (data) {
            console.log(`‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${Object.keys(data).length} –ª–µ—Ç`);
            resolve(data);
          } else {
            console.warn('–ü—É—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π');
            resolve(null);
          }
        },
        error: () => {
          console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π');
          resolve(null);
        }
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
   */
  getWorkingHoursForMonth(year: number, month: number): number {
    const key = `${year}-${month.toString().padStart(2, '0')}`;
    return this.workingCalendar()[key] || this.getDefaultHoursForMonth(month);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
   */
  getWorkingHoursForPeriod(startDate: Date, endDate: Date): number {
    let totalHours = 0;
    const current = new Date(startDate);
    
    while (current <= endDate) {
      const year = current.getFullYear();
      const month = current.getMonth() + 1;
      const hoursInMonth = this.getWorkingHoursForMonth(year, month);
      
      // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —á–∞—Å—Ç–∏—á–Ω—ã–π
      const daysInMonth = new Date(year, month, 0).getDate();
      const workingDaysInMonth = Math.floor(hoursInMonth / this.WORKING_HOURS_PER_DAY);
      
      totalHours += hoursInMonth; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
      
      current.setMonth(current.getMonth() + 1);
    }
    
    return totalHours;
  }

  // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

  private generateYearsRange(): number[] {
    const years: number[] = [];
    for (let year = this.START_YEAR; year <= this.CURRENT_YEAR; year++) {
      years.push(year);
    }
    return years;
  }

  private buildWorkingCalendarFromCache(): WorkingCalendar {
    const calendar: WorkingCalendar = {};
    
    Object.entries(this.calendarCache).forEach(([year, data]) => {
      if (data && data.months) {
        data.months.forEach((monthData) => {
          const monthKey = `${year}-${monthData.month.toString().padStart(2, '0')}`;
          const workingHours = this.calculateWorkingHoursForMonth(data, monthData);
          calendar[monthKey] = workingHours;
        });
      }
    });

    return calendar;
  }

  private calculateWorkingHoursForMonth(yearData: RussianCalendarData, monthData: RussianCalendarMonth): number {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const year = yearData.year;
    const month = monthData.month;
    const totalDaysInMonth = new Date(year, month, 0).getDate();
    
    // –ü–∞—Ä—Å–∏–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const holidays = monthData.days.split(',').map(day => {
      // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (* + –∏ —Ç.–¥.)
      return parseInt(day.replace(/[*+]/g, ''));
    }).filter(day => !isNaN(day));

    // –†–∞–±–æ—á–∏–µ –¥–Ω–∏ = –≤—Å–µ–≥–æ –¥–Ω–µ–π - –≤—ã—Ö–æ–¥–Ω—ã–µ
    const workingDays = totalDaysInMonth - holidays.length;
    
    // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã = —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ * 8 —á–∞—Å–æ–≤
    const workingHours = Math.max(0, workingDays * this.WORKING_HOURS_PER_DAY);
    
    return workingHours;
  }

  private generateDefaultCalendar(): WorkingCalendar {
    const calendar: WorkingCalendar = {};
    const currentYear = new Date().getFullYear();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    for (let month = 1; month <= 12; month++) {
      const key = `${currentYear}-${month.toString().padStart(2, '0')}`;
      calendar[key] = this.getDefaultHoursForMonth(month);
    }
    
    return calendar;
  }

  private getDefaultHoursForMonth(month: number): number {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
    const defaultHours: { [key: number]: number } = {
      1: 164,  // —è–Ω–≤–∞—Ä—å (–º–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
      2: 160,  // —Ñ–µ–≤—Ä–∞–ª—å (–∫–æ—Ä–æ—Ç–∫–∏–π –º–µ—Å—è—Ü)
      3: 168,  // –º–∞—Ä—Ç (8 –º–∞—Ä—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–π)
      4: 168,  // –∞–ø—Ä–µ–ª—å
      5: 152,  // –º–∞–π (–º–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: 1, 9 –º–∞—è)
      6: 168,  // –∏—é–Ω—å
      7: 176,  // –∏—é–ª—å
      8: 176,  // –∞–≤–≥—É—Å—Ç
      9: 168,  // —Å–µ–Ω—Ç—è–±—Ä—å
      10: 184, // –æ–∫—Ç—è–±—Ä—å (–¥–ª–∏–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –º–µ—Å—è—Ü)
      11: 160, // –Ω–æ—è–±—Ä—å (4 –Ω–æ—è–±—Ä—è –≤—ã—Ö–æ–¥–Ω–æ–π)
      12: 168  // –¥–µ–∫–∞–±—Ä—å
    };
    
    return defaultHours[month] || 168;
  }

  // === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ===

  private isCacheValid(year: number): boolean {
    const cached = this.calendarCache[year.toString()];
    if (!cached) return false;
    
    const cacheTimestamp = localStorage.getItem(`${this.CACHE_KEY}-timestamp-${year}`);
    if (!cacheTimestamp) return false;
    
    const daysSinceCache = (Date.now() - parseInt(cacheTimestamp)) / (1000 * 60 * 60 * 24);
    return daysSinceCache < this.CACHE_EXPIRY_DAYS;
  }

  private loadCachedData(): void {
    try {
      const cached = localStorage.getItem(this.CACHE_KEY);
      if (cached) {
        this.calendarCache = JSON.parse(cached);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ –∫—ç—à–∞
        if (Object.keys(this.calendarCache).length > 0) {
          const calendar = this.buildWorkingCalendarFromCache();
          this.workingCalendar.set(calendar);
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:', error);
      this.calendarCache = {};
    }
  }

  private saveCacheToStorage(): void {
    try {
      localStorage.setItem(this.CACHE_KEY, JSON.stringify(this.calendarCache));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
      Object.keys(this.calendarCache).forEach(year => {
        localStorage.setItem(`${this.CACHE_KEY}-timestamp-${year}`, Date.now().toString());
      });
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:', error);
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
   */
  clearCache(): void {
    this.calendarCache = {};
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith(this.CACHE_KEY)) {
        localStorage.removeItem(key);
      }
    });
    console.log('üóëÔ∏è –ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
   */
  getCalendarStatistics(): {
    yearsLoaded: number;
    monthsLoaded: number;
    totalWorkingHours: number;
    coveragePeriod: string;
  } {
    const calendar = this.workingCalendar();
    const months = Object.keys(calendar);
    const years = [...new Set(months.map(key => key.split('-')[0]))];
    const totalHours = Object.values(calendar).reduce((sum, hours) => sum + hours, 0);
    
    const sortedYears = years.sort();
    const period = sortedYears.length > 1 
      ? `${sortedYears[0]}-${sortedYears[sortedYears.length - 1]}`
      : sortedYears[0] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

    return {
      yearsLoaded: years.length,
      monthsLoaded: months.length,
      totalWorkingHours: totalHours,
      coveragePeriod: period
    };
  }
}

// === –£–¢–ò–õ–ò–¢–´ ===
