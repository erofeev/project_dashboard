const { spawn } = require('child_process');
const path = require('path');

// –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
const mcpServerPath = path.join(__dirname, 'infrastructure/mcp-server/easyredmine-mcp-server/dist/easyredmine-index.js');

// –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const mcpServer = spawn('node', [mcpServerPath], {
  stdio: ['pipe', 'pipe', 'pipe']
});

// MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
const getProjectsRequest = {
  jsonrpc: "2.0",
  id: 1,
  method: "tools/call",
  params: {
    name: "get_projects",
    arguments: {
      limit: 50,
      offset: 0
    }
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
mcpServer.stdout.on('data', (data) => {
  try {
    const response = JSON.parse(data.toString());
    
    if (response.result && response.result.content) {
      console.log('üöÄ EasyRedmine Projects:');
      console.log('=' .repeat(50));
      
      const projectsData = JSON.parse(response.result.content[0].text);
      
      if (projectsData.data && projectsData.data.length > 0) {
        console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsData.total_count}`);
        console.log(`üìã –ü–æ–∫–∞–∑–∞–Ω–æ: ${projectsData.data.length}`);
        console.log('');
        
        projectsData.data.forEach((project, index) => {
          console.log(`${index + 1}. ${project.name}`);
          console.log(`   ID: ${project.id}`);
          console.log(`   –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${project.identifier}`);
          console.log(`   –°—Ç–∞—Ç—É—Å: ${project.status}`);
          console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(project.created_on).toLocaleDateString('ru-RU')}`);
          console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(project.updated_on).toLocaleDateString('ru-RU')}`);
          if (project.description) {
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${project.description.substring(0, 100)}${project.description.length > 100 ? '...' : ''}`);
          }
          console.log('');
        });
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(projectsData, null, 2));
      }
      
      mcpServer.kill();
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
mcpServer.stderr.on('data', (data) => {
  const message = data.toString().trim();
  if (message && !message.includes('EasyRedmine MCP server started')) {
    console.log('‚ö†Ô∏è  MCP Server:', message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
mcpServer.on('close', (code) => {
  if (code !== 0) {
    console.log(`üîö MCP Server exited with code ${code}`);
  }
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ EasyRedmine...');
console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');
mcpServer.stdin.write(JSON.stringify(getProjectsRequest) + '\n');

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
setTimeout(() => {
  console.log('‚è∞ –¢–∞–π–º–∞—É—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
  mcpServer.kill();
}, 15000);
