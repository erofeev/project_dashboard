import { Component, signal, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';

// –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–æ PrimeNG
// TODO: –î–æ–±–∞–≤–∏—Ç—å PrimeNG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç—ã

import { ConfigService, ERMConfig, UserRate } from '../../core/services/config.service';
import { NotificationService } from '../../core/services/notification.service';
import { ERMService } from '../../core/services/erm.service';
import { ERMWorkerService } from '../../core/services/erm-worker.service';
import { PouchDBService } from '../../core/services/pouchdb.service';

@Component({
  selector: 'app-settings',
  standalone: true,
  imports: [
    CommonModule, 
    FormsModule, 
    ReactiveFormsModule
  ],
  templateUrl: './settings.component.html',
  styleUrl: './settings.component.scss'
})
export class SettingsComponent implements OnInit {
  
  // === SERVICES ===
  private configService = inject(ConfigService);
  private fb = inject(FormBuilder);
  private notificationService = inject(NotificationService);
  private ermService = inject(ERMService);
  private ermWorkerService = inject(ERMWorkerService);
  private pouchDBService = inject(PouchDBService);

  // === FORMS ===
  public ermConfigForm!: FormGroup;
  public ratesForm!: FormGroup;

  // === STATE ===
  public currentConfig = signal<ERMConfig | null>(null);
  public userRates = signal<UserRate[]>([]);
  public isLoading = signal(false);
  
  // === ERM STATE ===
  public isTestingConnection = signal(false);
  public connectionStatus = signal<'unknown' | 'success' | 'error'>('unknown');
  public isSyncing = signal(false);
  public syncStatus = signal<string>('');
  public syncStats = signal<any>(null);
  
  // === –°–¢–†–ê–¢–ï–ì–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===
  public loadingStrategy = signal<'quick' | 'full' | 'projects' | 'users' | null>(null);
  public discoveredUsers = signal<any[]>([]);
  public selectedUsers = signal<number[]>([]);
  public strategyResults = signal<any>(null);

  ngOnInit() {
    this.initializeForms();
    this.loadConfiguration();
  }

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–û–†–ú ===
  
  private initializeForms() {
    // –§–æ—Ä–º–∞ ERM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ Config –ª–∏—Å—Ç–∞ B2-B6)
    this.ermConfigForm = this.fb.group({
      baseUrl: ['', [Validators.required, Validators.pattern(/^https?:\/\/.+/)]],
      apiKey: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required],
      projectId: [''],
      userFilter: [''] // –°—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    });

    // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ (–∞–Ω–∞–ª–æ–≥ Rates –ª–∏—Å—Ç–∞)
    this.ratesForm = this.fb.group({
      userName: ['', Validators.required],
      dateFrom: [new Date(), Validators.required],
      grossPerMonth: [0, Validators.min(0)],
      hourlyRate: [0, Validators.min(0)]
    });
  }

  private loadConfiguration() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = this.configService.getERMConfig();
    this.currentConfig.set(config);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    this.ermConfigForm.patchValue({
      ...config,
      userFilter: config.userFilter.join(', ') // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const rates = this.configService.getUserRates();
    this.userRates.set(rates);
  }

  // === –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
  
  public saveERMConfig() {
    if (this.ermConfigForm.valid) {
      this.isLoading.set(true);
      
      const formValue = this.ermConfigForm.value;
      const config: ERMConfig = {
        ...formValue,
        userFilter: formValue.userFilter 
          ? formValue.userFilter.split(',').map((s: string) => s.trim()).filter((s: string) => s)
          : []
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const errors = this.configService.validateERMConfig(config);
      if (errors.length > 0) {
        this.notificationService.error(
          '–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
          errors.join('\n')
        );
        this.isLoading.set(false);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      this.configService.updateERMConfig(config);
      this.currentConfig.set(config);
      
      this.notificationService.configSaved();
      
      this.isLoading.set(false);
    } else {
      this.notificationService.warning(
        '–§–æ—Ä–º–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      );
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–í–ö–ê–ú–ò ===
  
  public addUserRate() {
    if (this.ratesForm.valid) {
      const newRate: UserRate = this.ratesForm.value;
      this.configService.addUserRate(newRate);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
      const updatedRates = this.configService.getUserRates();
      this.userRates.set(updatedRates);
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      this.ratesForm.reset({
        dateFrom: new Date(),
        grossPerMonth: 0,
        hourlyRate: 0
      });
      
      this.notificationService.success(
        '–°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        `–°—Ç–∞–≤–∫–∞ –¥–ª—è ${newRate.userName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`
      );
    }
  }

  public removeUserRate(index: number) {
    this.configService.removeUserRate(index);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    const updatedRates = this.configService.getUserRates();
    this.userRates.set(updatedRates);
    
    this.notificationService.info(
      '–°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 
      '–°—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    );
  }

  // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===
  // (–ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ —Å–µ–∫—Ü–∏—é ERM INTEGRATION METHODS)

  // === –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ ===
  
  public exportConfiguration() {
    const data = this.configService.exportConfiguration();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    
    const filename = `project-analytics-config-${new Date().toISOString().split('T')[0]}.json`;
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    
    window.URL.revokeObjectURL(url);
    
    this.notificationService.fileExported(filename);
  }

  public onImportFile(event: any) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target?.result as string);
        const success = this.configService.importConfiguration(data);
        
        if (success) {
          this.loadConfiguration(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º—ã
          this.notificationService.fileImported(file.name);
        }
      } catch (error) {
        this.notificationService.error(
          '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞',
          '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        );
      }
    };
    
    reader.readAsText(file);
  }

  // === ERM INTEGRATION METHODS ===

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EasyRedmine
   */
  public async testERMConnection() {
    if (this.isTestingConnection()) return;

    this.isTestingConnection.set(true);
    this.connectionStatus.set('unknown');
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç ERM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ERM...');
      this.saveERMConfig();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
      const currentConfig = this.configService.getERMConfig();
      console.log('üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ERM:', {
        baseUrl: currentConfig.baseUrl,
        hasApiKey: !!currentConfig.apiKey
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ERMService
      console.log('üîç –í—ã–∑—ã–≤–∞–µ–º ERMService.testConnection()...');
      const isConnected = await this.ermService.testConnection();
      
      if (isConnected) {
        console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!');
        this.connectionStatus.set('success');
        this.notificationService.success(
          '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', 
          'ERM API –æ—Ç–≤–µ—á–∞–µ—Ç. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.'
        );
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      this.connectionStatus.set('error');
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.status === 0) {
        errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (CORS/–ø—Ä–æ–∫—Å–∏ –æ—à–∏–±–∫–∞)';
      } else if (error.status === 401) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á';
      } else if (error.status === 404) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      this.notificationService.error(
        '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ERM',
        `${errorMessage}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`
      );
    } finally {
      this.isTestingConnection.set(false);
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏)
   */
  public async syncServiceData() {
    if (this.isSyncing()) return;

    this.isSyncing.set(true);
    this.syncStatus.set('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ERMService –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
      const serviceData = await this.ermService.refreshServiceData();

      this.syncStatus.set('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      this.notificationService.success(
        '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${serviceData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${serviceData.projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${serviceData.activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`
      );

      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.syncStats.set({
        users: serviceData.users.length,
        projects: serviceData.projects.length,
        activities: serviceData.activities.length,
        timeEntries: 0, // –ù–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        lastSync: new Date()
      });

    } catch (error) {
      this.syncStatus.set('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤');
      this.notificationService.error(
        '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );
    } finally {
      this.isSyncing.set(false);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ EasyRedmine –≤ PouchDB
   */
  public async syncERMData() {
    if (this.isSyncing()) return;

    this.isSyncing.set(true);
    this.syncStatus.set('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ERMWorkerService
      const config = this.configService.getERMConfig();
      this.ermWorkerService.updateConfig({
        apiUrl: config.baseUrl,
        apiKey: config.apiKey,
        syncInterval: 30,
        enabled: true
      });

      this.syncStatus.set('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EasyRedmine...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await this.ermWorkerService.startSync();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await this.ermWorkerService.getSyncStats();
      this.syncStats.set(stats);

      this.syncStatus.set('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      this.notificationService.success(
        '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!',
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${stats.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${stats.projects} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${stats.timeEntries} –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏`
      );
    } catch (error) {
      this.syncStatus.set('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      this.notificationService.error(
        '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );
    } finally {
      this.isSyncing.set(false);
    }
  }

  // === –ù–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
   */
  public async quickLoadMasterData() {
    if (this.loadingStrategy()) return;

    this.loadingStrategy.set('quick');
    this.syncStatus.set('üöÄ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...');

    try {
      const result = await this.ermService.executeLoadingStrategy('full', {
        saveToDb: true // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
      });

      this.discoveredUsers.set(result.users);
      this.strategyResults.set(result);
      
      this.syncStatus.set(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${result.stats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${result.stats.totalProjects} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
      this.notificationService.success(
        '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
        `${result.stats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${result.stats.totalProjects} –ø—Ä–æ–µ–∫—Ç–æ–≤`
      );

    } catch (error) {
      this.syncStatus.set('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + String(error));
      this.notificationService.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏');
      
    } finally {
      this.loadingStrategy.set(null);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º (–≤–∞—à–∞ –∏–¥–µ—è)
   */
  public async loadByProjects() {
    if (this.loadingStrategy()) return;

    this.loadingStrategy.set('projects');
    this.syncStatus.set('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º...');

    try {
      const config = this.configService.getERMConfig();
      
      const result = await this.ermService.executeLoadingStrategy('projects', {
        dateFrom: config.startDate,
        dateTo: config.endDate,
        selectedProjectIds: [], // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç
        saveToDb: true
      });

      this.discoveredUsers.set(result.users);
      this.strategyResults.set(result);
      
      this.syncStatus.set(
        `‚úÖ –ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º: ${result.stats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ` +
        `${result.stats.totalProjects} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${result.stats.totalTimeEntries} –∑–∞–ø–∏—Å–µ–π`
      );
      
      this.notificationService.success(
        '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 
        `${result.stats.totalTimeEntries} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–µ–Ω–æ`
      );

    } catch (error) {
      this.syncStatus.set('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º: ' + String(error));
      this.notificationService.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º');
      
    } finally {
      this.loadingStrategy.set(null);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public async saveSelectedUsersData() {
    if (!this.selectedUsers().length) {
      this.notificationService.error('–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    if (this.loadingStrategy()) return;

    this.loadingStrategy.set('users');
    this.syncStatus.set(`üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${this.selectedUsers().length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    try {
      const config = this.configService.getERMConfig();
      
      const result = await this.ermService.executeLoadingStrategy('users', {
        selectedUserIds: this.selectedUsers(),
        dateFrom: config.startDate,
        dateTo: config.endDate,
        saveToDb: true
      });

      this.strategyResults.set(result);
      
      this.syncStatus.set(
        `‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.stats.savedTimeEntries} –∑–∞–ø–∏—Å–µ–π`
      );
      
      this.notificationService.success(
        '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 
        `${result.stats.savedTimeEntries} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î`
      );

    } catch (error) {
      this.syncStatus.set('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + String(error));
      this.notificationService.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
    } finally {
      this.loadingStrategy.set(null);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public toggleUserSelection(userId: number) {
    const current = this.selectedUsers();
    const index = current.indexOf(userId);
    
    if (index === -1) {
      this.selectedUsers.set([...current, userId]);
    } else {
      this.selectedUsers.set(current.filter(id => id !== userId));
    }
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public selectAllUsers() {
    const allUserIds = this.discoveredUsers().map(user => user.id);
    this.selectedUsers.set(allUserIds);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public clearUserSelection() {
    this.selectedUsers.set([]);
  }
}
