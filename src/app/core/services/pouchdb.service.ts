import { Injectable } from '@angular/core';
import PouchDB from 'pouchdb';
import PouchDBFind from 'pouchdb-find';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
PouchDB.plugin(PouchDBFind);

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–ê–ù–ù–´–• (–∏–∑ –≤–∞—à–µ–≥–æ VBA –∞–Ω–∞–ª–∏–∑–∞) ===

// === –°–ò–°–¢–ï–ú–ù–´–ô –ö–ê–õ–ï–ù–î–ê–†–¨ (–û–ë–©–ò–ô –î–õ–Ø –í–°–ï–•) ===
export interface SystemCalendar {
  _id: 'system-calendar';
  _rev?: string;
  version: string;
  lastUpdated: Date | string;
  source: 'xmlcalendar.ru' | 'static' | 'manual';
  
  // –†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –†–§ (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã)
  workingCalendar: {
    [monthKey: string]: number; // "2025-01" -> 164 —á–∞—Å–æ–≤
  };
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  metadata: {
    totalYears: number;
    yearRange: { from: number; to: number };
    totalMonths: number;
    averageHoursPerMonth: number;
  };
}

export interface User {
  _id?: string;
  _rev?: string;
  email: string;
  name: string;
  role: 'admin' | 'director' | 'project_manager' | 'employee' | 'superadmin';
  direction: string;
  grossPerMonth?: number;
  hourlyRate?: number;
  workingHoursPerMonth?: number;
  created_at: Date;
  updated_at: Date;
  
  // === –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
  ermSettings?: {
    baseUrl: string;
    apiKey: string;
    startDate: string;
    endDate: string;
    projectId?: string;
    userFilter: string[];
  };
  userRates?: Array<{
    userName: string;
    startDate: Date | string; // –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞–≤–∫–∏  
    endDate?: Date | string;  // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (null = —Ç–µ–∫—É—â–∞—è)
    grossPerMonth?: number;   // –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    hourlyRate?: number;      // –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ñ–æ–ª–ª–±—ç–∫)
    currency?: string;        // –≤–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
    isActive?: boolean;       // –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏ —Å—Ç–∞–≤–∫–∞
  }>;
  // –ö–ê–õ–ï–ù–î–ê–†–¨ –ü–ï–†–ï–ù–ï–°–ï–ù –í SystemCalendar - –û–ë–©–ò–ô –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  
  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø ===
  isActive?: boolean;
  apiKey?: string;
  baseUrl?: string;
  userId?: string;
  password?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface Project {
  _id?: string;
  _rev?: string;
  name: string;
  description?: string;
  direction: string;
  status: 'planning' | 'active' | 'completed' | 'cancelled';
  plannedCost?: number;
  contractCost?: number;
  plannedHours?: number;
  actualCost?: number;
  actualHours?: number;
  participants: string[]; // User IDs
  created_at: Date;
  updated_at: Date;
}

export interface TimeEntry {
  _id?: string;
  _rev?: string;
  entryId: string;
  projectName: string;
  issueId?: string;
  userName: string;
  activity: string;
  date: Date;
  hours: number;
  paidHours: number;
  comments?: string;
  createdOn: Date;
  rate?: number;
  cost?: number;
}

export interface Invoice {
  _id?: string;
  _rev?: string;
  number: string;
  projectId: string;
  amount: number;
  currency: string;
  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
  dateIssued: Date;
  dateDue: Date;
  datePaid?: Date;
  created_at: Date;
  updated_at: Date;
}

export interface Payment {
  _id?: string;
  _rev?: string;
  invoiceId: string;
  amount: number;
  currency: string;
  dateReceived: Date;
  paymentMethod: string;
  notes?: string;
  created_at: Date;
}

@Injectable({
  providedIn: 'root'
})
export class PouchDBService {
  private databases: { [key: string]: PouchDB.Database } = {};
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑ –≤–∞—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
  private readonly COUCHDB_URL = 'http://localhost:5984';
  private readonly COUCHDB_USER = 'admin';
  private readonly COUCHDB_PASS = 'admin123';
  
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    // this.initializeDatabases();
  }

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó –î–ê–ù–ù–´–• ===
  async initializeDatabases() {
    const dbNames = ['users', 'projects', 'time_entries', 'invoices', 'payments'];
    
    for (const dbName of dbNames) {
      try {
        // –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const localDb = new PouchDB(dbName);
        
        // TODO: –£–¥–∞–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        // const remoteUrl = `${this.COUCHDB_URL}/${dbName}`;
        // const remoteDb = new PouchDB(remoteUrl, {
        //   auth: {
        //     username: this.COUCHDB_USER,
        //     password: this.COUCHDB_PASS
        //   }
        // });
        
        // TODO: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        // localDb.sync(remoteDb, {
        //   live: true,
        //   retry: true
        // }).on('change', (info) => {
        //   console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${dbName}:`, info);
        // }).on('error', (err) => {
        //   console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${dbName}:`, err);
        // });
        
        this.databases[dbName] = localDb;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await this.createIndexes(localDb, dbName);
        
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É ${dbName}:`, error);
        // Fallback: —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞
        this.databases[dbName] = new PouchDB(dbName);
      }
    }
    
    console.log('üíæ PouchDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', Object.keys(this.databases));
  }

  // === –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í ===
  private async createIndexes(db: PouchDB.Database, dbName: string) {
    try {
      switch (dbName) {
        case 'users':
          await db.createIndex({ index: { fields: ['email'] } });
          await db.createIndex({ index: { fields: ['role'] } });
          break;
        case 'projects':
          await db.createIndex({ index: { fields: ['status'] } });
          await db.createIndex({ index: { fields: ['direction'] } });
          break;
        case 'time_entries':
          await db.createIndex({ index: { fields: ['userName', 'date'] } });
          await db.createIndex({ index: { fields: ['projectName'] } });
          break;
        case 'invoices':
          await db.createIndex({ index: { fields: ['status'] } });
          await db.createIndex({ index: { fields: ['projectId'] } });
          break;
        case 'payments':
          await db.createIndex({ index: { fields: ['invoiceId'] } });
          break;
      }
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è ${dbName}:`, error);
    }
  }

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
  async getUsers(limit?: number): Promise<User[]> {
    const db = this.databases['users'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await db.allDocs({
      include_docs: true,
      limit: limit
    });
    
    return result.rows.map(row => row.doc as User);
  }

  async getUserByEmail(email: string): Promise<User | null> {
    const db = this.databases['users'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    try {
      const result = await db.find({
        selector: { email: email }
      });
      
      return result.docs.length > 0 ? result.docs[0] as User : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  async createUser(userData: Omit<User, '_id' | '_rev' | 'created_at' | 'updated_at'>): Promise<User> {
    const db = this.databases['users'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const user: User = {
      ...userData,
      _id: `user_${Date.now()}`,
      created_at: new Date(),
      updated_at: new Date()
    };

    const result = await db.put(user);
    return { ...user, _rev: result.rev };
  }

  // === –ü–†–û–ï–ö–¢–´ ===
  async getProjects(limit?: number): Promise<Project[]> {
    const db = this.databases['projects'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await db.allDocs({
      include_docs: true,
      limit: limit
    });
    
    return result.rows.map(row => row.doc as Project);
  }

  async createProject(projectData: Omit<Project, '_id' | '_rev' | 'created_at' | 'updated_at'>): Promise<Project> {
    const db = this.databases['projects'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const project: Project = {
      ...projectData,
      _id: `project_${Date.now()}`,
      created_at: new Date(),
      updated_at: new Date()
    };

    const result = await db.put(project);
    return { ...project, _rev: result.rev };
  }

  // === –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–ü–ò–°–ò (–ê–Ω–∞–ª–æ–≥ –≤–∞—à–µ–≥–æ Excel –æ—Ç—á–µ—Ç–∞) ===
  async getTimeEntries(filters?: {
    userName?: string;
    projectName?: string;
    dateFrom?: Date;
    dateTo?: Date;
    limit?: number;
  }): Promise<TimeEntry[]> {
    const db = this.databases['time_entries'];
    if (!db) throw new Error('–ë–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    let selector: any = {};
    
    if (filters?.userName) {
      selector.userName = filters.userName;
    }
    
    if (filters?.projectName) {
      selector.projectName = filters.projectName;
    }
    
    if (filters?.dateFrom || filters?.dateTo) {
      selector.date = {};
      if (filters.dateFrom) selector.date.$gte = filters.dateFrom;
      if (filters.dateTo) selector.date.$lte = filters.dateTo;
    }

    try {
      const result = await db.find({
        selector: Object.keys(selector).length > 0 ? selector : undefined,
        limit: filters?.limit || 1000
      });
      
      return result.docs as TimeEntry[];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      return [];
    }
  }

  async createTimeEntry(entryData: Omit<TimeEntry, '_id' | '_rev'>): Promise<TimeEntry> {
    const db = this.databases['time_entries'];
    if (!db) throw new Error('–ë–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const entry: TimeEntry = {
      ...entryData,
      _id: `time_entry_${entryData.entryId}_${Date.now()}`
    };

    const result = await db.put(entry);
    return { ...entry, _rev: result.rev };
  }

  // === –°–ß–ï–¢–ê ===
  async getInvoices(projectId?: string): Promise<Invoice[]> {
    const db = this.databases['invoices'];
    if (!db) throw new Error('–ë–∞–∑–∞ —Å—á–µ—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    if (projectId) {
      const result = await db.find({
        selector: { projectId: projectId }
      });
      return result.docs as Invoice[];
    }

    const result = await db.allDocs({ include_docs: true });
    return result.rows.map(row => row.doc as Invoice);
  }

  // === –ü–õ–ê–¢–ï–ñ–ò ===
  async getPayments(invoiceId?: string): Promise<Payment[]> {
    const db = this.databases['payments'];
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    if (invoiceId) {
      const result = await db.find({
        selector: { invoiceId: invoiceId }
      });
      return result.docs as Payment[];
    }

    const result = await db.allDocs({ include_docs: true });
    return result.rows.map(row => row.doc as Payment);
  }

  // === –°–ò–°–¢–ï–ú–ù–´–ô –ö–ê–õ–ï–ù–î–ê–†–¨ ===
  async getSystemCalendar(): Promise<SystemCalendar | null> {
    const db = this.databases['users']; // –•—Ä–∞–Ω–∏–º –≤ —Ç–æ–π –∂–µ –ë–î, —á—Ç–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    try {
      const doc = await db.get('system-calendar');
      return doc as SystemCalendar;
    } catch (error: any) {
      if (error.status === 404) {
        console.log('–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
        return null;
      }
      throw error;
    }
  }

  async saveSystemCalendar(calendar: Omit<SystemCalendar, '_id'>): Promise<SystemCalendar> {
    const db = this.databases['users']; 
    if (!db) throw new Error('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      let existingCalendar: SystemCalendar | null = null;
      try {
        existingCalendar = await this.getSystemCalendar();
      } catch (error) {
        // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      }

      const calendarDoc: SystemCalendar = {
        _id: 'system-calendar',
        _rev: existingCalendar?._rev,
        version: calendar.version,
        lastUpdated: new Date().toISOString(),
        source: calendar.source,
        workingCalendar: calendar.workingCalendar,
        metadata: calendar.metadata
      };

      const result = await db.put(calendarDoc);
      
      return {
        ...calendarDoc,
        _rev: result.rev
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
      throw error;
    }
  }

  async updateSystemCalendar(updates: Partial<Omit<SystemCalendar, '_id' | '_rev'>>): Promise<SystemCalendar> {
    const existingCalendar = await this.getSystemCalendar();
    if (!existingCalendar) {
      throw new Error('–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.');
    }

    const updatedCalendar = {
      ...existingCalendar,
      ...updates,
      lastUpdated: new Date().toISOString()
    };

    return await this.saveSystemCalendar(updatedCalendar);
  }

  async getWorkingHoursForMonth(year: number, month: number): Promise<number> {
    const calendar = await this.getSystemCalendar();
    if (!calendar) return 160; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ

    const monthKey = `${year}-${month.toString().padStart(2, '0')}`;
    return calendar.workingCalendar[monthKey] || 160;
  }

  async getAllWorkingHours(): Promise<{ [monthKey: string]: number }> {
    const calendar = await this.getSystemCalendar();
    if (!calendar) return {};

    return calendar.workingCalendar;
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–Ω–∞–ª–æ–≥ –≤–∞—à–∏—Ö –º–∞–∫—Ä–æ—Å–æ–≤) ===
  async getDatabaseStats() {
    const stats: any = {};
    
    for (const dbName of Object.keys(this.databases)) {
      try {
        const info = await this.databases[dbName].info();
        stats[dbName] = {
          doc_count: info.doc_count,
          update_seq: info.update_seq
        };
      } catch (error) {
        stats[dbName] = { error: error };
      }
    }
    
    return stats;
  }

  // === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===
  async destroy() {
    for (const db of Object.values(this.databases)) {
      try {
        await db.close();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    }
    this.databases = {};
  }
}
