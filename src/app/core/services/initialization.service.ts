import { Injectable, inject } from '@angular/core';
import { ConfigService } from './config.service';
import { CalendarService } from './calendar.service';
import { PouchDBService } from './pouchdb.service';

export interface AppInitializationData {
  user: any;
  ermConfig: any;
  userRates: any[];
  // workingCalendar —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –≤ PouchDB –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}

@Injectable({
  providedIn: 'root'
})
export class InitializationService {
  
  private configService = inject(ConfigService);
  private calendarService = inject(CalendarService);
  private pouchDBService = inject(PouchDBService);
  
  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ PouchDB
   * –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –∏–ª–∏ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async initializeApp(): Promise<AppInitializationData | null> {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PouchDB 
      console.log('üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PouchDB...');
      await this.pouchDBService.initializeDatabases();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ PouchDB
      console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –†–§...');
      const realCalendar = await this.calendarService.loadAllCalendars();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ PouchDB
      if (Object.keys(realCalendar).length > 0) {
        const years = Object.keys(realCalendar).map(key => parseInt(key.split('-')[0]));
        const uniqueYears = [...new Set(years)];
        const totalHours = Object.values(realCalendar).reduce((sum, hours) => sum + hours, 0);
        
        await this.pouchDBService.saveSystemCalendar({
          version: '1.0.0',
          lastUpdated: new Date().toISOString(),
          source: 'xmlcalendar.ru',
          workingCalendar: realCalendar,
          metadata: {
            totalYears: uniqueYears.length,
            yearRange: { 
              from: Math.min(...uniqueYears), 
              to: Math.max(...uniqueYears) 
            },
            totalMonths: Object.keys(realCalendar).length,
            averageHoursPerMonth: Math.round(totalHours / Object.keys(realCalendar).length)
          }
        });
        
        console.log('üíæ –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PouchDB:', {
          –º–µ—Å—è—Ü–µ–≤: Object.keys(realCalendar).length,
          –ª–µ—Ç: uniqueYears.length,
          –ø–µ—Ä–∏–æ–¥: `${Math.min(...uniqueYears)}-${Math.max(...uniqueYears)}`
        });
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ –≤–∞—à–µ–≥–æ PouchDB)
      const adminUserData = {
        email: 'admin@admin.ru',
        name: 'Andrey Erofeev (xmraner)',
        role: 'superadmin',
        
        // ERM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Excel Config –ª–∏—Å—Ç–∞
        ermSettings: {
          baseUrl: 'https://easyredmine.awara.pro',
          apiKey: '763c9fa14fcc0343773389494e8ba3004ef3cd65',
          startDate: '2025-08-01',
          endDate: '2025-08-31',
          projectId: '',
          userFilter: [
            'Andrey Erofeev', 'Boris Bartenev', 'Dmitry Barabin',
            'Aleksandr Dmitriev', 'Mikhail Matyasov', 'Oleg Rybikov', 'Sergey Lychagin',
            'Alexey Ponomarenko', 'Mikhail Pavlukhin', 'Mikhail Yurchenko', 'Timofey Kochetkov',
            'Nikita Avdonin', 'Alice Boyarkina', 'Alexandra Dementieva',
            'Amir Khalikov', 'Amirjon Holikov', 'Nur-Magomed Tasuev', 'Julia Shutova',
            'Vadim Bondar', 'Lev Totok'
          ]
        },
        
        // –°—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel Rates –ª–∏—Å—Ç–∞
        userRates: [
          // === –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –°–¢–ê–í–ö–ò –ò–ó EXCEL –¢–ê–ë–õ–ò–¶–´ ===
          // Aleksandr Dmitriev - –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å –º–∞—è 2025
          {
            userName: 'Aleksandr Dmitriev',
            startDate: '2025-01-01',
            endDate: '2025-04-30',
            grossPerMonth: 252874,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: false
          },
          {
            userName: 'Aleksandr Dmitriev',
            startDate: '2025-05-01',
            endDate: null,
            grossPerMonth: 316092,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Alexandra Dementieva - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Alexandra Dementieva',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 63218,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Alexey Ponomarenko - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Alexey Ponomarenko',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 265517,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Alice Boyarkina - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Alice Boyarkina',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 126437,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Amir Khalikov - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Amir Khalikov',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 189655,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Amirjon Holikov - –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å –º–∞—è 2025
          {
            userName: 'Amirjon Holikov',
            startDate: '2025-01-01',
            endDate: '2025-04-30',
            grossPerMonth: 101149,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: false
          },
          {
            userName: 'Amirjon Holikov',
            startDate: '2025-05-01',
            endDate: null,
            grossPerMonth: 151724,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Andrey Erofeev - –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å –º–∞—Ä—Ç–∞ 2025
          {
            userName: 'Andrey Erofeev',
            startDate: '2025-01-01',
            endDate: '2025-02-28',
            grossPerMonth: 316092,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: false
          },
          {
            userName: 'Andrey Erofeev',
            startDate: '2025-03-01',
            endDate: null,
            grossPerMonth: 379310,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Boris Bartenev - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Boris Bartenev',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 227586,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Dmitry Barabin - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Dmitry Barabin',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 126437,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Julia Shutova - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Julia Shutova',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 189655,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Lev Totok - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Lev Totok',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 101149,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Mikhail Matyasov - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Mikhail Matyasov',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 252874,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Mikhail Pavlukhin - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Mikhail Pavlukhin',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 303448,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Mikhail Yurchenko - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Mikhail Yurchenko',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 164368,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Nikita Avdonin - –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å –º–∞—Ä—Ç–∞ 2025
          {
            userName: 'Nikita Avdonin',
            startDate: '2025-01-01',
            endDate: '2025-02-28',
            grossPerMonth: 50575,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: false
          },
          {
            userName: 'Nikita Avdonin',
            startDate: '2025-03-01',
            endDate: null,
            grossPerMonth: 75862,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Nur-Magomed Tasuev - —Ç–æ–ª—å–∫–æ –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Nur-Magomed Tasuev',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 0,
            hourlyRate: 1380,
            currency: 'RUB',
            isActive: true
          },
          
          // Oleg Rybikov - —Ç–æ–ª—å–∫–æ –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Oleg Rybikov',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 0,
            hourlyRate: 1418,
            currency: 'RUB',
            isActive: true
          },
          
          // Sergey Lychagin - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Sergey Lychagin',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 354023,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Timofey Kochetkov - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Timofey Kochetkov',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 189655,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          },
          
          // Vadim Bondar - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
          {
            userName: 'Vadim Bondar',
            startDate: '2025-01-01',
            endDate: null,
            grossPerMonth: 284483,
            hourlyRate: 0,
            currency: 'RUB',
            isActive: true
          }
        ]
        
        // –ö–ê–õ–ï–ù–î–ê–†–¨ –¢–ï–ü–ï–†–¨ –•–†–ê–ù–ò–¢–°–Ø –í PouchDB –ö–ê–ö –°–ò–°–¢–ï–ú–ù–´–ï –î–ê–ù–ù–´–ï
      };
      
      console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminUserData.name);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ ConfigService
      if (adminUserData.ermSettings) {
        console.log('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º ERM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
        this.configService.updateERMConfig(adminUserData.ermSettings);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (adminUserData.userRates && Array.isArray(adminUserData.userRates)) {
        console.log('üí∞ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', adminUserData.userRates.length, '–∑–∞–ø–∏—Å–µ–π');
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const uniqueUsers = [...new Set(adminUserData.userRates.map(r => r.userName))];
        console.log('üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', uniqueUsers.length);
        this.configService.updateUserRates(adminUserData.userRates);
      }
      
      // –ö–ê–õ–ï–ù–î–ê–†–¨ –£–ñ–ï –°–û–•–†–ê–ù–ï–ù –í PouchDB –ö–ê–ö –°–ò–°–¢–ï–ú–ù–´–ï –î–ê–ù–ù–´–ï
      
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
      return {
        user: adminUserData,
        ermConfig: adminUserData.ermSettings,
        userRates: adminUserData.userRates
        // workingCalendar —Ç–µ–ø–µ—Ä—å –≤ PouchDB
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fallbackData = {
        user: {
          email: 'admin@admin.ru',
          name: 'Andrey Erofeev (xmraner)', 
          role: 'superadmin'
        },
        ermConfig: {
          baseUrl: 'https://easyredmine.awara.pro',
          apiKey: '763c9fa14fcc0343773389494e8ba3004ef3cd65',
          startDate: '2025-08-01',
          endDate: '2025-08-31',
          projectId: '',
          userFilter: []
        },
        userRates: []
      };
      
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
      return fallbackData;
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ MCP
   */
  async saveConfigurationToDatabase(): Promise<boolean> {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ MCP...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ConfigService
      const ermConfig = this.configService.getERMConfig();
      const userRates = this.configService.getUserRates();
      // workingCalendar —Ç–µ–ø–µ—Ä—å –≤ PouchDB, –Ω–µ –≤ ConfigService
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const updatedUserData = {
        email: 'admin@admin.ru',
        password: 'admin',
        role: 'superadmin',
        name: 'Andrey Erofeev (xmraner)',
        direction: 'IT Development',
        isActive: true,
        createdAt: '2025-08-30T23:49:12.188Z',
        updatedAt: new Date().toISOString(),
        apiKey: '763c9fa14fcc0343773389494e8ba3004ef3cd65',
        baseUrl: 'https://easyredmine.awara.pro',
        userId: 'admin@admin.ru',
        ermSettings: ermConfig,
        userRates: userRates
        // workingCalendar —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –≤ PouchDB
      };
      
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP API
      // await mcp_pouchdb_update_document('users', 'admin@admin.ru', updatedUserData);
      
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
        ermConfig: !!ermConfig.baseUrl,
        userRatesCount: userRates.length
        // –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–ø–µ—Ä—å –≤ PouchDB –æ—Ç–¥–µ–ª—å–Ω–æ
      });
      
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async getInitializationStatus(): Promise<{
    isInitialized: boolean;
    hasERMConfig: boolean;
    hasUserRates: boolean;
    hasWorkingCalendar: boolean;
  }> {
    try {
      const ermConfig = this.configService.getERMConfig();
      const userRates = this.configService.getUserRates();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ PouchDB
      const systemCalendar = await this.pouchDBService.getSystemCalendar();
      
      return {
        isInitialized: true,
        hasERMConfig: !!(ermConfig.baseUrl && ermConfig.apiKey),
        hasUserRates: userRates.length > 0,
        hasWorkingCalendar: !!(systemCalendar && Object.keys(systemCalendar.workingCalendar).length > 0)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      return {
        isInitialized: false,
        hasERMConfig: false,
        hasUserRates: false,
        hasWorkingCalendar: false
      };
    }
  }
}