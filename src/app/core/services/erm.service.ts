import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, map, retry } from 'rxjs/operators';
import { ConfigService } from './config.service';
import { PouchDBService } from './pouchdb.service';

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ ERM API (–∏–∑ –≤–∞—à–µ–≥–æ VBA –∞–Ω–∞–ª–∏–∑–∞) ===

export interface ERMUser {
  id: number;
  name: string;
  firstname: string;
  lastname: string;
  mail: string;
  status: number;
}

export interface ERMProject {
  id: number;
  name: string;
  identifier: string;
  description?: string;
  status: number;
  is_public: boolean;
  created_on: string;
  updated_on: string;
}

export interface ERMTimeEntry {
  id: number;
  project: { id: number; name: string };
  issue?: { id: number };
  user: { id: number; name: string };
  activity: { id: number; name: string };
  hours: number;
  paid_hours: number;
  comments: string;
  spent_on: string;
  created_on: string;
}

export interface ERMActivity {
  id: number;
  name: string;
  is_default: boolean;
}

export interface ERMIssue {
  id: number;
  project: { id: number; name: string; identifier: string };
  tracker: { id: number; name: string };
  status: { id: number; name: string };
  priority: { id: number; name: string };
  author: { id: number; name: string };
  assigned_to?: { id: number; name: string };
  subject: string;
  description?: string;
  start_date?: string;
  due_date?: string;
  done_ratio: number;
  is_private: boolean;
  estimated_hours?: number;
  total_estimated_hours?: number;
  spent_hours: number;
  total_spent_hours: number;
  created_on: string;
  updated_on: string;
  closed_on?: string;
}

export interface ERMResponse<T> {
  total_count: number;
  offset: number;
  limit: number;
  projects?: T[];
  users?: T[];
  time_entry_activities?: T[];
  time_entries?: T[];
  issues?: T[];
}

@Injectable({
  providedIn: 'root'
})
export class ERMService {
  private configService = inject(ConfigService);
  private pouchDBService = inject(PouchDBService);

  // –ö—ç—à –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ ServiceData –≤ Excel)
  private usersCache: Map<string, number> = new Map(); // name -> id
  private projectsCache: Map<string, number> = new Map(); // name -> id  
  private activitiesCache: Map<string, number> = new Map(); // name -> id

  constructor(private http: HttpClient) {}

  private getHeaders(): HttpHeaders {
    const config = this.configService.getERMConfig();
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'X-Redmine-API-Key': config.apiKey,
      'Accept': 'application/json'
    });
  }

  private getBaseUrl(): string {
    const originalUrl = this.configService.getERMConfig().baseUrl;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–µ URL –Ω–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
    if (originalUrl.startsWith('https://') || originalUrl.startsWith('http://')) {
      console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π URL –Ω–∞ –ø—Ä–æ–∫—Å–∏:', originalUrl, '‚Üí /api/erm');
      return '/api/erm';
    }
    
    return originalUrl;
  }

  // === –°–õ–£–ñ–ï–ë–ù–´–ï –î–ê–ù–ù–´–ï (–ê–Ω–∞–ª–æ–≥ RefreshServiceData –≤ VBA) ===
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
   * –ê–Ω–∞–ª–æ–≥ RefreshServiceData() –≤ VBA –º–∞–∫—Ä–æ—Å–µ
   */
  public async refreshServiceData(): Promise<{
    projects: ERMProject[],
    users: ERMUser[],
    activities: ERMActivity[]
  }> {
    const config = this.configService.getERMConfig();
    if (!config?.baseUrl || !config?.apiKey) {
      throw new Error('ERM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
      const [projects, users, activities] = await Promise.all([
        this.getProjects().toPromise(),
        this.getUsers().toPromise(), 
        this.getActivities().toPromise()
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      this.updateCaches(projects || [], users || [], activities || []);

      return {
        projects: projects || [],
        users: users || [],
        activities: activities || []
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  private updateCaches(projects: ERMProject[], users: ERMUser[], activities: ERMActivity[]) {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
    this.projectsCache.clear();
    this.usersCache.clear();
    this.activitiesCache.clear();

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects.forEach(project => {
      this.projectsCache.set(project.name, project.id);
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users.forEach(user => {
      const fullName = `${user.firstname} ${user.lastname}`.trim();
      this.usersCache.set(fullName, user.id);
      this.usersCache.set(user.name, user.id); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    activities.forEach(activity => {
      this.activitiesCache.set(activity.name, activity.id);
    });
  }

  // === API –ú–ï–¢–û–î–´ ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
   */
  getProjects(limit = 100, offset = 0): Observable<ERMProject[]> {
    const baseUrl = this.getBaseUrl();
    if (!baseUrl) return throwError('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const url = `${baseUrl}/projects.json?limit=${limit}&offset=${offset}`;
    
    return this.http.get<ERMResponse<ERMProject>>(url, { 
      headers: this.getHeaders()
    }).pipe(
      map(response => response.projects || []),
      retry(2),
      catchError(this.handleError)
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getUsers(limit = 100, offset = 0): Observable<ERMUser[]> {
    const config = this.configService.getERMConfig();
    if (!config) return throwError('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const url = `${config.baseUrl}/users.json?limit=${limit}&offset=${offset}&status=1`;
    
    return this.http.get<ERMResponse<ERMUser>>(url, { 
      headers: this.getHeaders()
    }).pipe(
      map(response => response.users || []),
      retry(2),
      catchError(this.handleError)
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   */
  getActivities(): Observable<ERMActivity[]> {
    const config = this.configService.getERMConfig();
    if (!config) return throwError('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const url = `${config.baseUrl}/enumerations/time_entry_activities.json`;
    
    return this.http.get<ERMResponse<ERMActivity>>(url, { 
      headers: this.getHeaders()
    }).pipe(
      map(response => response.time_entry_activities || []),
      retry(2),
      catchError(this.handleError)
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–∞–Ω–∞–ª–æ–≥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ VBA –º–∞–∫—Ä–æ—Å–∞)
   * GetEasyRedmineTime_FilterInMemory()
   */
  getTimeEntries(params?: {
    startDate?: string;
    endDate?: string;
    projectId?: string;
    userId?: string;
    userIds?: number[];
    limit?: number;
    offset?: number;
  }): Observable<ERMTimeEntry[]> {
    const config = this.configService.getERMConfig();
    if (!config) return throwError('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∞–Ω–∞–ª–æ–≥ VBA –∫–æ–¥–∞)
    let url = `${config.baseUrl}/easy_time_entries.json?easy_query_p=set_filter=0`;
    
    const limit = params?.limit || 100;
    const offset = params?.offset || 0;
    
    url += `&limit=${limit}&offset=${offset}`;
    
    // –î–∞—Ç—ã (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    const startDate = params?.startDate || config.startDate;
    const endDate = params?.endDate || config.endDate;
    
    if (startDate) url += `&from=${startDate}`;
    if (endDate) url += `&to=${endDate}`;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    if (params?.projectId || config.projectId) {
      url += `&project_id=${params?.projectId || config.projectId}`;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –∏–∑ VBA)
    if (params?.userIds && params.userIds.length > 0) {
      url += `&user_id=${params.userIds.join('|')}`;
    }

    return this.http.get<ERMResponse<ERMTimeEntry>>(url, { 
      headers: this.getHeaders()
    }).pipe(
      map(response => response.time_entries || []),
      retry(2),
      catchError(this.handleError)
    );
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
   * –ê–Ω–∞–ª–æ–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ VBA –º–∞–∫—Ä–æ—Å–µ
   */
  async getAllTimeEntriesWithProgress(
    userFilter?: string[],
    progressCallback?: (current: number, total: number, message: string) => void
  ): Promise<ERMTimeEntry[]> {
    const config = this.configService.getERMConfig();
    if (!config) throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    let allEntries: ERMTimeEntry[] = [];
    let offset = 0;
    const limit = 100;
    let totalCount = 0;
    let fetchedCount = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ (–±—ã—Å—Ç—Ä—ã–π/—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
    let userIds: number[] = [];
    let useFastMethod = false;

    if (userFilter && userFilter.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ ID (–∞–Ω–∞–ª–æ–≥ VBA –∫–æ–¥–∞)
      for (const userName of userFilter) {
        const userId = this.usersCache.get(userName);
        if (userId) {
          userIds.push(userId);
        }
      }
      
      if (userIds.length === userFilter.length) {
        useFastMethod = true;
        progressCallback?.(0, 1, '–í—ã–±—Ä–∞–Ω –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)');
      } else {
        progressCallback?.(0, 1, '–í—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª–∏–µ–Ω—Ç–µ)');
      }
    }

    try {
      do {
        const params: any = { limit, offset };
        
        if (useFastMethod && userIds.length > 0) {
          params.userIds = userIds;
        }
        
        const batch = await this.getTimeEntries(params).toPromise();
        
        if (batch && batch.length > 0) {
          if (offset === 0) {
            totalCount = 1000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          }
          
          if (useFastMethod) {
            // –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            allEntries.push(...batch);
            fetchedCount += batch.length;
          } else {
            // –ú–µ–¥–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for (const entry of batch) {
              if (!userFilter || userFilter.includes(entry.user.name)) {
                allEntries.push(entry);
              }
              fetchedCount++;
            }
          }
          
          progressCallback?.(
            fetchedCount, 
            totalCount, 
            `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allEntries.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${fetchedCount} –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`
          );
          
          offset += limit;
        } else {
          break; // –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
        }
        
      } while (fetchedCount < 20000); // –õ–∏–º–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      
      return allEntries;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      throw error;
    }
  }

  // === ISSUES API (–õ–æ–≥–∏–∫–∞ –∏–∑ Excel –º–∞–∫—Ä–æ—Å–∞) ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ issues –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ "–Ω–∞—à–∏—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª–æ–≥–∏–∫–∏ –∏–∑ Excel –º–∞–∫—Ä–æ—Å–∞ - –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ users API
   */
  public getIssues(params: {
    limit?: number;
    offset?: number;
    project_id?: number;
    assigned_to_id?: number;
    status_id?: string;
    created_on?: string; // ><2023-01-01|2023-12-31
  } = {}): Observable<ERMResponse<ERMIssue>> {
    const searchParams = new URLSearchParams({
      limit: (params.limit || 100).toString(),
      offset: (params.offset || 0).toString(),
      ...Object.fromEntries(
        Object.entries(params).filter(([key, value]) => 
          key !== 'limit' && key !== 'offset' && value !== undefined
        ).map(([key, value]) => [key, value.toString()])
      )
    });

    const url = `${this.getBaseUrl()}/issues.json?${searchParams}`;
    
    return this.http.get<ERMResponse<ERMIssue>>(url, { headers: this.getHeaders() })
      .pipe(
        retry(2),
        catchError(this.handleError)
      );
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ issues (–ª–æ–≥–∏–∫–∞ Excel –º–∞–∫—Ä–æ—Å–∞)
   * –≠—Ç–æ –Ω–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∞ –Ω–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  public async extractUsersFromIssues(limit: number = 1000): Promise<ERMUser[]> {
    const allUsers = new Map<number, ERMUser>();
    let offset = 0;
    const batchSize = 100;

    try {
      while (offset < limit) {
        const response = await this.getIssues({ 
          limit: batchSize, 
          offset 
        }).toPromise();

        if (!response || !response.issues || response.issues.length === 0) {
          break;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º assigned_to –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response.issues.forEach(issue => {
          if (issue.assigned_to && !allUsers.has(issue.assigned_to.id)) {
            allUsers.set(issue.assigned_to.id, {
              id: issue.assigned_to.id,
              name: issue.assigned_to.name,
              firstname: issue.assigned_to.name.split(' ')[0] || '',
              lastname: issue.assigned_to.name.split(' ').slice(1).join(' ') || '',
              mail: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              status: 1 // –ê–∫—Ç–∏–≤–Ω—ã–π
            });
          }
        });

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (response.issues.length < batchSize) {
          break;
        }

        offset += batchSize;
      }

      console.log(`üéØ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${allUsers.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ issues`);
      return Array.from(allUsers.values());

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ issues:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ª–æ–≥–∏–∫–∞ Excel)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ "–Ω–∞—à–∏—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ issues
   */
  public getTimeEntriesByUsers(
    userIds: number[],
    dateFrom?: string, 
    dateTo?: string,
    limit: number = 1000
  ): Observable<ERMResponse<ERMTimeEntry>> {
    const params: any = {
      limit: limit.toString(),
      user_id: userIds.join(',') // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    };

    if (dateFrom) params.spent_on = `><${dateFrom}`;
    if (dateTo && dateFrom) params.spent_on = `><${dateFrom}|${dateTo}`;

    const searchParams = new URLSearchParams(params);
    const url = `${this.getBaseUrl()}/time_entries.json?${searchParams}`;
    
    return this.http.get<ERMResponse<ERMTimeEntry>>(url, { headers: this.getHeaders() })
      .pipe(
        retry(2),
        catchError(this.handleError)
      );
  }

  // === –°–¢–†–ê–¢–ï–ì–ò–ò –ó–ê–ì–†–£–ó–ö–ò (–õ–æ–≥–∏–∫–∞ –∏–∑ Excel) ===

  /**
   * –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ PouchDB
   */
  public async getQuickUsers(): Promise<ERMUser[]> {
    // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ PouchDB –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üöÄ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞');
    return Array.from(this.usersCache.entries()).map(([name, id]) => ({
      id,
      name,
      firstname: name.split(' ')[0] || '',
      lastname: name.split(' ').slice(1).join(' ') || '',
      mail: '',
      status: 1
    }));
  }

  /**
   * –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (Excel –ª–æ–≥–∏–∫–∞)
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï issues –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * Issues –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public async getFullUsersDiscovery(): Promise<ERMUser[]> {
    console.log('üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ALL issues');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ issues –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const allUsers = await this.extractUsersFromIssues(10000); // –ú–Ω–æ–≥–æ issues
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      allUsers.forEach(user => {
        this.usersCache.set(user.name, user.id);
      });
      
      console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É issues`);
      return allUsers;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º (–≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)  
   * 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
   * 2. –ü–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –∑–∞–≥—Ä—É–∑–∏—Ç—å time entries
   * 3. –ò–∑–≤–ª–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã–µ
   */
  public async getDataByProjects(dateFrom?: string, dateTo?: string): Promise<{
    projects: ERMProject[],
    users: ERMUser[],
    timeEntries: ERMTimeEntry[]
  }> {
    console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º - —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ—Ç–æ–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∞–Ω–Ω—ã–µ');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
      const projects = await this.getProjects(1000, 0).toPromise() || [];
      
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
      
      // 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
      const allTimeEntries: ERMTimeEntry[] = [];
      const allUsers = new Map<number, ERMUser>();
      
      for (const project of projects) {
        try {
          console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${project.name}`);
          
          // –ü–æ–ª—É—á–∞–µ–º time entries –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          const params: any = { 
            limit: 1000,
            project_id: project.id 
          };
          
          if (dateFrom) params.spent_on = `><${dateFrom}`;
          if (dateTo && dateFrom) params.spent_on = `><${dateFrom}|${dateTo}`;
          
          const projectTimeEntries = await this.getTimeEntries(params).toPromise() || [];
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
          allTimeEntries.push(...projectTimeEntries);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          projectTimeEntries.forEach((entry: ERMTimeEntry) => {
            if (entry.user && !allUsers.has(entry.user.id)) {
              allUsers.set(entry.user.id, {
                id: entry.user.id,
                name: entry.user.name,
                firstname: entry.user.name.split(' ')[0] || '',
                lastname: entry.user.name.split(' ').slice(1).join(' ') || '',
                mail: '',
                status: 1
              });
            }
          });
          
        } catch (projectError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:`, projectError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        }
      }
      
      const users = Array.from(allUsers.values());
      
      console.log(`‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
      console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
      console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${allTimeEntries.length}`);
      
      return {
        projects,
        users,
        timeEntries: allTimeEntries
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:', error);
      throw error;
    }
  }

  /**
   * –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ë—ã—Å—Ç—Ä–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (Excel –ª–æ–≥–∏–∫–∞)
   * –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã, –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ö time entries
   */
  public async getQuickTimeEntriesForUsers(
    userIds: number[], 
    dateFrom?: string, 
    dateTo?: string
  ): Promise<ERMTimeEntry[]> {
    console.log(`‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤—ã–±–æ—Ä–∫–∞ time entries –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    try {
      const response = await this.getTimeEntriesByUsers(userIds, dateFrom, dateTo, 10000).toPromise();
      const timeEntries = response?.time_entries || [];
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${timeEntries.length} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      return timeEntries;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≤—ã–±–æ—Ä–∫–∏:', error);
      throw error;
    }
  }

  // === –°–ï–õ–ï–ö–¢–ò–í–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ===

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
   * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã - —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  public async saveMasterDataToDB(
    users: ERMUser[], 
    projects: ERMProject[],
    activities?: ERMActivity[]
  ): Promise<void> {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –ë–î...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)
      for (const user of users) {
        await this.pouchDBService.upsertDocument('users', `erm_${user.id}`, {
          ermId: user.id,
          name: user.name,
          firstname: user.firstname,
          lastname: user.lastname,
          mail: user.mail,
          status: user.status,
          source: 'erm', // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
          lastUpdated: new Date().toISOString()
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)
      for (const project of projects) {
        await this.pouchDBService.upsertDocument('projects', `erm_${project.id}`, {
          ermId: project.id,
          name: project.name,
          identifier: project.identifier,
          description: project.description,
          status: project.status,
          is_public: project.is_public,
          created_on: project.created_on,
          updated_on: project.updated_on,
          source: 'erm',
          lastUpdated: new Date().toISOString()
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (activities) {
        for (const activity of activities) {
          await this.pouchDBService.upsertDocument('activities', `erm_${activity.id}`, {
            ermId: activity.id,
            name: activity.name,
            is_default: activity.is_default,
            source: 'erm',
            lastUpdated: new Date().toISOString()
          });
        }
      }
      
      console.log(`‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${users.length} users, ${projects.length} projects`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–µ–∫—Ç–æ–≤
   * Time entries –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–æ –∫–ª—é—á—É ERM ID
   */
  public async saveSelectedDataToDB(
    timeEntries: ERMTimeEntry[],
    selectedUserIds: number[],
    selectedProjectIds: number[]
  ): Promise<void> {
    try {
      console.log('üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–µ–∫—Ç–æ–≤...');
      
      let savedCount = 0;
      
      for (const entry of timeEntries) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ò–õ–ò –ø—Ä–æ–µ–∫—Ç–∞–º
        const isSelectedUser = selectedUserIds.includes(entry.user.id);
        const isSelectedProject = selectedProjectIds.includes(entry.project.id);
        
        if (isSelectedUser || isSelectedProject) {
          await this.pouchDBService.upsertDocument('time_entries', `erm_${entry.id}`, {
            ermId: entry.id,
            project: entry.project,
            user: entry.user,
            issue: entry.issue,
            activity: entry.activity,
            hours: entry.hours,
            paid_hours: entry.paid_hours,
            comments: entry.comments,
            spent_on: entry.spent_on,
            created_on: entry.created_on,
            source: 'erm',
            lastUpdated: new Date().toISOString()
          });
          savedCount++;
        }
      }
      
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ${timeEntries.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  public async executeLoadingStrategy(
    strategy: 'projects' | 'users' | 'full',
    options: {
      selectedUserIds?: number[];
      selectedProjectIds?: number[];
      dateFrom?: string;
      dateTo?: string;
      saveToDb?: boolean;
    }
  ): Promise<{
    users: ERMUser[];
    projects: ERMProject[];
    timeEntries: ERMTimeEntry[];
    stats: {
      totalUsers: number;
      totalProjects: number;
      totalTimeEntries: number;
      savedTimeEntries: number;
    }
  }> {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: ${strategy}`);
    
    let users: ERMUser[] = [];
    let projects: ERMProject[] = [];
    let timeEntries: ERMTimeEntry[] = [];
    
    try {
      switch (strategy) {
        case 'projects':
          const projectData = await this.getDataByProjects(options.dateFrom, options.dateTo);
          users = projectData.users;
          projects = projectData.projects;
          timeEntries = projectData.timeEntries;
          break;
          
        case 'users':
          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (options.selectedUserIds && options.selectedUserIds.length > 0) {
            timeEntries = await this.getQuickTimeEntriesForUsers(
              options.selectedUserIds, 
              options.dateFrom, 
              options.dateTo
            );
            users = await this.getQuickUsers();
          } else {
            users = await this.getFullUsersDiscovery();
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
          projects = await this.getProjects(1000, 0).toPromise() || [];
          break;
          
        case 'full':
          // –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ
          users = await this.getFullUsersDiscovery();
          projects = await this.getProjects(1000, 0).toPromise() || [];
          
          if (options.selectedUserIds && options.selectedUserIds.length > 0) {
            timeEntries = await this.getQuickTimeEntriesForUsers(
              options.selectedUserIds,
              options.dateFrom,
              options.dateTo
            );
          }
          break;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      let savedTimeEntries = 0;
      if (options.saveToDb) {
        // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        await this.saveMasterDataToDB(users, projects);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if (timeEntries.length > 0 && (options.selectedUserIds?.length || options.selectedProjectIds?.length)) {
          await this.saveSelectedDataToDB(
            timeEntries,
            options.selectedUserIds || [],
            options.selectedProjectIds || []
          );
          
          savedTimeEntries = timeEntries.filter(entry => 
            (options.selectedUserIds || []).includes(entry.user.id) ||
            (options.selectedProjectIds || []).includes(entry.project.id)
          ).length;
        }
      }
      
      const stats = {
        totalUsers: users.length,
        totalProjects: projects.length,
        totalTimeEntries: timeEntries.length,
        savedTimeEntries
      };
      
      console.log('‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', stats);
      
      return { users, projects, timeEntries, stats };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ${strategy}:`, error);
      throw error;
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ (–∏–∑ –∫—ç—à–∞)
   */
  getUserId(userName: string): number | undefined {
    return this.usersCache.get(userName);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ (–∏–∑ –∫—ç—à–∞)  
   */
  getProjectId(projectName: string): number | undefined {
    return this.projectsCache.get(projectName);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ (–∏–∑ –∫—ç—à–∞)
   */
  getActivityId(activityName: string): number | undefined {
    return this.activitiesCache.get(activityName);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ERM API
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º 1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async testConnection(): Promise<boolean> {
    const config = this.configService.getERMConfig();
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
      baseUrl: config.baseUrl,
      hasApiKey: !!config.apiKey
    });
    
    if (!config?.baseUrl || !config?.apiKey) {
      console.error('‚ùå ERM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è');
      return false;
    }

    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ ERM...');
      const projects = await this.getProjects(1, 0).toPromise();
      
      if (projects && projects.length >= 0) {
        console.log('‚úÖ ERM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projects.length);
        return true;
      } else {
        console.warn('‚ö†Ô∏è ERM –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö');
        return false;
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ERM:', {
        message: error.message,
        status: error.status,
        url: error.url,
        error
      });
      return false;
    }
  }

  // === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===
  private handleError = (error: any) => {
    console.error('ERM API Error:', error);
    
    if (error.status === 401) {
      return throwError('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
    } else if (error.status === 404) {
      return throwError('ERM —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error.status === 0) {
      return throwError('CORS –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    return throwError(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ERM API');
  };
}
